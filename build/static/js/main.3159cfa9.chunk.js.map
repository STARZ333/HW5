{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","index.js"],"names":["Todo","todo","remove","update","toggleComplete","useState","isEditing","setIsEditing","task","setTask","className","onSubmit","evt","preventDefault","id","onChange","target","value","type","onClick","completed","NewTodoForm","createTodo","useReducer","state","newState","userInput","setUserInput","newTodo","uuid","htmlFor","name","placeholder","TodoList","todos","setTodos","filter","updtedTask","updatedTodos","map","todosList","console","log","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iOAmEeA,MA/Df,YAAyD,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,eAClC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAASJ,EAAKO,MAAtC,mBAAOA,EAAP,KAAaC,EAAb,KA0DA,OArCIH,EAEI,qBAAKI,UAAU,OAAf,SACI,uBAAMA,UAAU,iBAAiBC,SAhBxB,SAACC,GAClBA,EAAIC,iBACJV,EAAOF,EAAKa,GAAIN,GAJhBD,GAAcD,IAkBN,UACI,uBAAOS,SAZF,SAACH,GAClBH,EAAQG,EAAII,OAAOC,QAWwBA,MAAOT,EAAMU,KAAK,SACjD,+CAMR,sBAAKR,UAAU,OAAf,UAEI,wBACII,GAAIb,EAAKa,GACTK,QApBQ,SAACP,GACrBR,EAAeQ,EAAII,OAAOF,KAoBdJ,UAAWT,EAAKmB,UAAY,sBAAwB,YAHxD,kBAQA,oBACIN,GAAIb,EAAKa,GAETJ,UAAWT,EAAKmB,UAAY,sBAAwB,YAHxD,SAKKnB,EAAKO,OAIV,wBAAQW,QAjDA,SAACP,GACjBV,EAAOU,EAAII,OAAOF,KAgDoBA,GAAIb,EAAKa,GAAvC,wB,6BCjBDO,MAnCf,YAA2C,EAApBb,KAAqB,IAAfc,EAAc,EAAdA,WAC3B,EAAkCC,sBAChC,SAACC,EAAOC,GAAR,mBAAC,eAA0BD,GAAUC,KACrC,CACEjB,KAAM,KAHV,mBAAOkB,EAAP,KAAkBC,EAAlB,KAkBA,OACE,uBAAMjB,UAAU,cAAcC,SARX,SAAAC,GACnBA,EAAIC,iBACJ,IAAMe,EAAU,CAAEd,GAAIe,MAAQrB,KAAMkB,EAAUlB,KAAMY,WAAW,GAC/DE,EAAWM,GACXD,EAAa,CAAEnB,KAAM,MAIrB,UACE,uBAAOsB,QAAQ,OAAf,sBACA,uBACEb,MAAOS,EAAUlB,KACjBO,SAhBe,SAAAH,GACnBe,EAAa,eAAGf,EAAII,OAAOe,KAAOnB,EAAII,OAAOC,SAgBzCH,GAAG,OACHI,KAAK,OACLa,KAAK,OACLC,YAAY,aAEd,kD,MC4BSC,MAxDf,WACE,MAA0B5B,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcC,EAAd,KAUMjC,EAAS,SAAAY,GACbqB,EAASD,EAAME,QAAO,SAAAnC,GAAI,OAAIA,EAAKa,KAAOA,OAGtCX,EAAS,SAACW,EAAIuB,GAClB,IAAMC,EAAeJ,EAAMK,KAAI,SAAAtC,GAC7B,OAAIA,EAAKa,KAAOA,EACP,2BAAKb,GAAZ,IAAkBO,KAAM6B,IAEnBpC,KAETkC,EAASG,IAGLlC,EAAiB,SAAAU,GACrB,IAAMwB,EAAeJ,EAAMK,KAAI,SAAAtC,GAC7B,OAAIA,EAAKa,KAAOA,EACP,2BAAKb,GAAZ,IAAkBmB,WAAYnB,EAAKmB,YAE9BnB,KAETkC,EAASG,IAGLE,EAAYN,EAAMK,KAAI,SAAAtC,GAAI,OAC9B,cAAC,EAAD,CACEG,eAAgBA,EAChBD,OAAQA,EACRD,OAAQA,EAERD,KAAMA,GADDA,EAAKa,OAKd,OACE,sBAAKJ,UAAU,WAAf,UACE,+CAGA,6BAAK8B,IACL,cAAC,EAAD,CAAalB,WA7CF,SAAAM,GACba,QAAQC,IAAId,GACZO,EAAS,GAAD,mBAAKD,GAAL,CAAYN,YCVxB,SAASe,IACP,OACE,qBAAKjC,UAAU,MAAf,SACE,cAAC,EAAD,MAKN,IAAMkC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACL,EAAD,IAASC,K","file":"static/js/main.3159cfa9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./Todo.css\";\r\n\r\nfunction Todo({ todo, remove, update, toggleComplete }) {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [task, setTask] = useState(todo.task);\r\n\r\n    const handleClick = (evt) => {\r\n        remove(evt.target.id);\r\n    };\r\n    const toggleFrom = () => {\r\n        setIsEditing(!isEditing);\r\n    };\r\n    const handleUpdate = (evt) => {\r\n        evt.preventDefault();\r\n        update(todo.id, task);\r\n        toggleFrom();\r\n    };\r\n    const handleChange = (evt) => {\r\n        setTask(evt.target.value);\r\n    };\r\n    const toggleCompleted = (evt) => {\r\n        toggleComplete(evt.target.id);\r\n    };\r\n\r\n    let result;\r\n    if (isEditing) {\r\n        result = (\r\n            <div className=\"Todo\">\r\n                <form className=\"Todo-edit-form\" onSubmit={handleUpdate}>\r\n                    <input onChange={handleChange} value={task} type=\"text\" />\r\n                    <button>Save</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    } else {\r\n        result = (\r\n            <div className=\"Todo\">\r\n\r\n                <button\r\n                    id={todo.id}\r\n                    onClick={toggleCompleted}\r\n                    className={todo.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n                >\r\n                    Done\r\n                </button>\r\n\r\n                <li\r\n                    id={todo.id}\r\n                    // onClick={toggleCompleted}\r\n                    className={todo.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n                >\r\n                    {todo.task}\r\n                </li>\r\n\r\n\r\n                <button onClick={handleClick} id={todo.id}>\r\n                        Delete\r\n                </button>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n    return result;\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport uuid from 'react-uuid';\r\nimport \"./newTodoForm.css\";\r\n\r\nfunction NewTodoForm({ task, createTodo }) {\r\n  const [userInput, setUserInput] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      task: \"\"\r\n    }\r\n  );\r\n\r\n  const handleChange = evt => {\r\n    setUserInput({ [evt.target.name]: evt.target.value });\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    const newTodo = { id: uuid(), task: userInput.task, completed: false };\r\n    createTodo(newTodo);\r\n    setUserInput({ task: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\r\n      <label htmlFor=\"task\">New todo</label>\r\n      <input\r\n        value={userInput.task}\r\n        onChange={handleChange}\r\n        id=\"task\"\r\n        type=\"text\"\r\n        name=\"task\"\r\n        placeholder=\"New Todo\"\r\n      />\r\n      <button>Add Todo</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport uuid from 'react-uuid';\r\nimport \"./TodoList.css\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([\r\n    // { id: uuid(), task: \"task 1\", completed: false },\r\n    // { id: uuid(), task: \"task 2\", completed: true }\r\n  ]);\r\n\r\n  const create = newTodo => {\r\n    console.log(newTodo);\r\n    setTodos([...todos, newTodo]);\r\n  };\r\n\r\n  const remove = id => {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  };\r\n\r\n  const update = (id, updtedTask) => {\r\n    const updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updtedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const toggleComplete = id => {\r\n    const updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const todosList = todos.map(todo => (\r\n    <Todo\r\n      toggleComplete={toggleComplete}\r\n      update={update}\r\n      remove={remove}\r\n      key={todo.id}\r\n      todo={todo}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"TodoList\">\r\n      <h1>\r\n        CGU Todo List \r\n      </h1>\r\n      <ul>{todosList}</ul>\r\n      <NewTodoForm createTodo={create} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TodoList from \"./TodoList.js\";\n// import \"./styles.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}